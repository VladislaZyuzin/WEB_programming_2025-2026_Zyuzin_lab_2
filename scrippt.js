let tasks = [];
let sortAsc = true;
let filterStatus = 'all';
let searchQuery = '';

document.addEventListener('DOMContentLoaded', () => {
  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const container = document.createElement('div');
  container.className = 'container';
  document.body.appendChild(container);

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  const header = document.createElement('header');
  const title = document.createElement('h1');
  title.textContent = 'üìù –ú–æ–π To-Do List';
  const subtitle = document.createElement('p');
  subtitle.className = 'subtitle';
  subtitle.textContent = '–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ';
  header.appendChild(title);
  header.appendChild(subtitle);
  container.appendChild(header);

  // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const taskForm = document.createElement('div');
  taskForm.className = 'task-form';
  
  const inputGroup = document.createElement('div');
  inputGroup.className = 'input-group';
  
  const taskInput = document.createElement('input');
  taskInput.type = 'text';
  taskInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...';
  taskInput.className = 'task-input-field';

  const taskDate = document.createElement('input');
  taskDate.type = 'date';
  taskDate.className = 'task-date-field';

  const addButton = document.createElement('button');
  addButton.className = 'add-btn';
  addButton.innerHTML = '‚ûï –î–æ–±–∞–≤–∏—Ç—å';

  inputGroup.append(taskInput, taskDate, addButton);
  taskForm.appendChild(inputGroup);
  container.appendChild(taskForm);

  // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const controlsPanel = document.createElement('div');
  controlsPanel.className = 'controls-panel';

  const searchContainer = document.createElement('div');
  searchContainer.className = 'search-container';
  const searchInput = document.createElement('input');
  searchInput.type = 'text';
  searchInput.placeholder = 'üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á...';
  searchInput.className = 'search-field';
  searchContainer.appendChild(searchInput);

  const filtersContainer = document.createElement('div');
  filtersContainer.className = 'filters-container';

  const statusFilter = document.createElement('select');
  statusFilter.className = 'status-filter';
  const filterOptions = [
    { value: 'all', text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏' },
    { value: 'incomplete', text: '‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ' },
    { value: 'completed', text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ' }
  ];
  
  filterOptions.forEach(option => {
    const optionElement = document.createElement('option');
    optionElement.value = option.value;
    optionElement.textContent = option.text;
    statusFilter.appendChild(optionElement);
  });

  const sortButton = document.createElement('button');
  sortButton.className = 'sort-btn';
  sortButton.innerHTML = 'üìÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ';

  const clearCompletedBtn = document.createElement('button');
  clearCompletedBtn.className = 'clear-btn';
  clearCompletedBtn.innerHTML = 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ';

  filtersContainer.append(statusFilter, sortButton, clearCompletedBtn);
  controlsPanel.append(searchContainer, filtersContainer);
  container.appendChild(controlsPanel);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const statsPanel = document.createElement('div');
  statsPanel.className = 'stats-panel';
  container.appendChild(statsPanel);

  // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
  const taskList = document.createElement('ul');
  taskList.className = 'task-list';
  taskList.id = 'taskList';
  container.appendChild(taskList);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
  loadTasks();
  updateStats();
  renderTasks();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  addButton.addEventListener('click', addTask);
  taskInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') addTask();
  });
  
  searchInput.addEventListener('input', () => {
    searchQuery = searchInput.value.trim().toLowerCase();
    renderTasks();
  });
  
  statusFilter.addEventListener('change', () => {
    filterStatus = statusFilter.value;
    renderTasks();
  });
  
  sortButton.addEventListener('click', toggleSort);
  clearCompletedBtn.addEventListener('click', clearCompletedTasks);

  // –§—É–Ω–∫—Ü–∏–∏
  function addTask() {
    const text = taskInput.value.trim();
    const date = taskDate.value;
    
    if (text === '') {
      showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!', 'error');
      return;
    }

    const task = {
      id: Date.now(),
      text: text,
      date: date || new Date().toISOString().split('T')[0],
      completed: false,
      createdAt: new Date().toISOString()
    };

    tasks.push(task);
    saveTasks();
    renderTasks();
    updateStats();
    
    taskInput.value = '';
    taskDate.value = '';
    taskInput.focus();
    
    showNotification('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
  }

  function deleteTask(id) {
    tasks = tasks.filter(task => task.id !== id);
    saveTasks();
    renderTasks();
    updateStats();
    showNotification('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', 'info');
  }

  function toggleTask(id) {
    const task = tasks.find(task => task.id === id);
    if (task) {
      task.completed = !task.completed;
      saveTasks();
      renderTasks();
      updateStats();
    }
  }

  function editTask(id) {
    const task = tasks.find(task => task.id === id);
    if (!task) return;

    const newText = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É:', task.text);
    if (newText !== null && newText.trim() !== '') {
      task.text = newText.trim();
    }

    const newDate = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):', task.date);
    if (newDate !== null && newDate.trim() !== '') {
      task.date = newDate.trim();
    }

    saveTasks();
    renderTasks();
    showNotification('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
  }

  function toggleSort() {
    tasks.sort((a, b) => {
      const dateA = new Date(a.date || a.createdAt);
      const dateB = new Date(b.date || b.createdAt);
      return sortAsc ? dateA - dateB : dateB - dateA;
    });
    
    sortAsc = !sortAsc;
    sortButton.innerHTML = sortAsc ? 'üìÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ ‚Üë' : 'üìÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ ‚Üì';
    renderTasks();
    saveTasks();
  }

  function clearCompletedTasks() {
    const completedCount = tasks.filter(task => task.completed).length;
    if (completedCount === 0) {
      showNotification('–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'info');
      return;
    }

    if (confirm(`–£–¥–∞–ª–∏—Ç—å ${completedCount} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á?`)) {
      tasks = tasks.filter(task => !task.completed);
      saveTasks();
      renderTasks();
      updateStats();
      showNotification(`–£–¥–∞–ª–µ–Ω–æ ${completedCount} –∑–∞–¥–∞—á`, 'success');
    }
  }

  function updateStats() {
    const total = tasks.length;
    const completed = tasks.filter(task => task.completed).length;
    const active = total - completed;

    statsPanel.innerHTML = `
      <div class="stat-item">
        <span class="stat-label">–í—Å–µ–≥–æ:</span>
        <span class="stat-value">${total}</span>
      </div>
      <div class="stat-item">
        <span class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã–µ:</span>
        <span class="stat-value">${active}</span>
      </div>
      <div class="stat-item">
        <span class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:</span>
        <span class="stat-value">${completed}</span>
      </div>
    `;
  }

  function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  function saveTasks() {
    localStorage.setItem('todoTasks', JSON.stringify(tasks));
  }

  function loadTasks() {
    const tasksJSON = localStorage.getItem('todoTasks');
    if (tasksJSON) {
      tasks = JSON.parse(tasksJSON);
    }
  }

  function formatDate(dateString) {
    if (!dateString) return '–ë–µ–∑ –¥–∞—Ç—ã';
    const options = { year: 'numeric', month: 'short', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('ru-RU', options);
  }

  function renderTasks() {
    taskList.innerHTML = '';

    let filteredTasks = tasks.filter(task => {
      if (filterStatus === 'completed' && !task.completed) return false;
      if (filterStatus === 'incomplete' && task.completed) return false;
      if (searchQuery && !task.text.toLowerCase().includes(searchQuery)) return false;
      return true;
    });

    if (filteredTasks.length === 0) {
      const emptyState = document.createElement('li');
      emptyState.className = 'empty-state';
      emptyState.innerHTML = `
        <div>üìù</div>
        <p>${searchQuery ? '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –∑–∞–¥–∞—á'}</p>
        <small>${searchQuery ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å' : '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!'}</small>
      `;
      taskList.appendChild(emptyState);
      return;
    }

    filteredTasks.forEach(task => {
      const li = document.createElement('li');
      li.className = `task-item ${task.completed ? 'completed' : ''}`;
      li.draggable = true;
      li.dataset.id = task.id;

      li.innerHTML = `
        <div class="task-content">
          <input type="checkbox" class="task-checkbox" ${task.completed ? 'checked' : ''}>
          <div class="task-info">
            <span class="task-text">${task.text}</span>
            <span class="task-date">${formatDate(task.date)}</span>
          </div>
        </div>
        <div class="task-actions">
          <button class="btn-edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
          <button class="btn-delete" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
        </div>
      `;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      const checkbox = li.querySelector('.task-checkbox');
      const editBtn = li.querySelector('.btn-edit');
      const deleteBtn = li.querySelector('.btn-delete');

      checkbox.addEventListener('change', () => toggleTask(task.id));
      editBtn.addEventListener('click', () => editTask(task.id));
      deleteBtn.addEventListener('click', () => deleteTask(task.id));

      // Drag and Drop
      li.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', task.id);
        li.classList.add('dragging');
      });

      li.addEventListener('dragend', () => {
        li.classList.remove('dragging');
      });

      li.addEventListener('dragover', (e) => {
        e.preventDefault();
      });

      li.addEventListener('drop', (e) => {
        e.preventDefault();
        const dragId = parseInt(e.dataTransfer.getData('text/plain'));
        const dropId = parseInt(li.dataset.id);
        
        if (dragId === dropId) return;
        
        const dragIndex = tasks.findIndex(t => t.id === dragId);
        const dropIndex = tasks.findIndex(t => t.id === dropId);
        
        const [dragTask] = tasks.splice(dragIndex, 1);
        tasks.splice(dropIndex, 0, dragTask);
        
        saveTasks();
        renderTasks();
        showNotification('–ü–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á –∏–∑–º–µ–Ω–µ–Ω', 'info');
      });

      taskList.appendChild(li);
    });
  }
});
